/**
 * Session Schema
 * 
 * Represents an exit interview session for an employee.
 * Tracks interview progress, timing, and stores AI-generated feedback.
 * 
 * @module mongodb/schemas/Session
 */

import mongoose, { Schema, Document } from "mongoose";

/**
 * Feedback Interface
 * 
 * Structured AI-generated feedback from completed exit interviews.
 * Generated by Lyzr AI agents based on interview conversation analysis.
 */
export interface IFeedback {
  /** Analysis of how reality compared to initial expectations */
  expectations_vs_reality: string;
  /** Main challenges and obstacles faced during employment */
  challenges_faced: string;
  /** Professional growth and learning opportunities identified */
  growth_and_learning: string;
  /** Quality and dynamics of manager relationship */
  relationship_with_manager: string;
  /** Employee's feelings about recognition and value */
  recognition_and_value: string;
  /** Positive highlights and memorable moments */
  highlights: string;
  /** Feedback on company transparency and policies */
  transparency_and_policies: string;
  /** Rejoin and recommendation indicators */
  rejoin_recommendation: {
    /** Whether employee would consider rejoining the company */
    would_rejoin: boolean;
    /** Whether employee would recommend the company to others */
    would_recommend: boolean;
    /** Conditions that would make employee consider rejoining */
    conditions_to_rejoin: string;
    /** Conditions that would influence recommendation */
    conditions_to_recommend: string;
  };
  /** Employee's feedback on the exit interview experience itself */
  feedback_experience: string;
  /** Additional insights and observations from the conversation */
  additional_insights: string;
}

/**
 * Session Document Interface
 * 
 * Represents an exit interview session with an employee.
 * Sessions progress through states: pending → active → completed/cancelled
 */
export interface ISession extends Document {
  /** Unique identifier for this interview session */
  session_id: string;
  /** HR user who created and owns this session */
  user_id: string;
  /** Departing employee's full name */
  name: string;
  /** Departing employee's email address */
  email: string;
  /** Employee's job role/function */
  role: string;
  /** Employee's seniority level in the organization */
  interview_level: string;
  /** Employee tenure in months (e.g., 2.5 for 2.5 months) */
  tenure: number;
  /** Current session status */
  status: string;
  /** Timestamp when session was created */
  created_at: Date;
  /** Timestamp of last session update */
  updated_at: Date;
  /** Timestamp when employee started the interview (optional) */
  started_at?: Date;
  /** Timestamp when interview was completed (optional) */
  completed_at?: Date;
  /** Total interview duration in minutes (optional) */
  duration_minutes?: number;
  /** AI-generated structured feedback (populated after completion) */
  feedback?: IFeedback;
}

/**
 * Mongoose schema definition for Session model
 */
const SessionSchema: Schema = new Schema({
  session_id: {
    type: String,
    required: true,
    unique: true,
    index: true,
  },
  user_id: {
    type: String,
    required: true,
    index: true,
  },
  name: {
    type: String,
    required: true,
    trim: true,
  },
  email: {
    type: String,
    required: true,
    trim: true,
    lowercase: true,
  },
  role: {
    type: String,
    required: true,
    enum: [
      "manager",
      "developer",
      "designer",
      "analyst",
      "marketing",
      "sales",
      "hr",
      "finance",
      "operations",
      "other",
    ],
  },
  interview_level: {
    type: String,
    required: true,
    enum: [
      "junior",
      "mid-level",
      "senior",
      "lead",
      "director",
      "vp",
      "c-level",
    ],
  },
  tenure: {
    type: Number,
    required: true,
    min: 0,
  },
  status: {
    type: String,
    required: true,
    enum: ["pending", "active", "completed", "paused", "cancelled"],
    default: "pending",
  },
  created_at: {
    type: Date,
    default: Date.now,
  },
  updated_at: {
    type: Date,
    default: Date.now,
  },
  started_at: {
    type: Date,
  },
  completed_at: {
    type: Date,
  },
  duration_minutes: {
    type: Number,
    default: 0,
  },
  feedback: {
    type: Object,
    required: false,
  },
});

/**
 * Pre-save hook to automatically update timestamp and calculate duration
 */
SessionSchema.pre<ISession>("save", function (next) {
  this.updated_at = new Date();

  // Auto-calculate duration when session is completed
  if (this.status === "completed" && this.started_at && this.completed_at) {
    const startTime = new Date(this.started_at);
    const endTime = new Date(this.completed_at);
    const durationMs = endTime.getTime() - startTime.getTime();
    this.duration_minutes = Math.round(durationMs / (1000 * 60));
  }

  next();
});

/**
 * Compound index for filtering sessions by user, status, and date
 */
SessionSchema.index({ user_id: 1, status: 1, created_at: -1 });

/**
 * Compound index for analytics queries by role and level
 */
SessionSchema.index({ user_id: 1, role: 1, interview_level: 1 });

/**
 * Session Model
 * 
 * Mongoose model for interview session operations.
 * Automatically reuses existing model in development to prevent re-compilation issues.
 */
export default mongoose.models.Session ||
  mongoose.model<ISession>("Session", SessionSchema);
